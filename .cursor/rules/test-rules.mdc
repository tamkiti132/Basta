---
description: 
globs: *Test.php
alwaysApply: false
---
# テスト作成のルール

## 命名規則

1. テストメソッド名は以下の形式に従う
   - 基本的な機能テスト: `test_メソッド名`
   - バリデーションテスト: `test_対象フィールド名_バリデーションルール名`
     - 例: `test_password_required`, `test_password_string`, `test_password_min`
   - テスト対象のメソッド名は日本語にせず、元のメソッド名をそのまま扱う

## コードの構造

1. メソッドごとのテストのグループ化
   - 各メソッドに関連するテストは一つのグループとしてまとめて配置する
   - 例: `deleteMemo`メソッドに関するすべてのテストを連続して配置する

2. テストの配置の順番は、各メソッドごとに以下のようにする
   1. 基本的な機能テスト (`test_メソッド名`)
   2. バリデーションテスト (`test_フィールド名_ルール名`)
   
3. 複数のメソッドに対するテストがある場合、上記の順序を各メソッドごとに繰り返す
   - 例:
     - `test_deleteMemo`（基本機能）
     - `test_deleteMemo_id_required`（バリデーション）
     - `test_deleteMemo_id_exists`（バリデーション）
     - `test_storeComment`（基本機能）
     - `test_storeComment_content_required`（バリデーション）
     - ...以下同様

4. バリデーションテスト内の構造
   - 同一メソッド内で正常系と異常系の両方をテストする
   - 正常系を先に、その後に異常系をテストする
   - 正常系と異常系のテストの間には、3行の空白をつくる
   - 明確なセクションコメントで区切る

5. テストの構造は「Arrange（準備）」「Act（実行）」「Assert（検証）」の順に記述する
   【重要】
   - 準備部分にはコメントで`// Arrange（準備）`と記載する
   - 正常系と異常系の区切りには、それぞれ`// 正常系`、`// 異常系`と記載する
   - 実行部分にはコメントで`// Act（実行）`と記載する
   - 検証部分にはコメントで`// Assert（検証）`と記載する
   - 検証の意図を明確にするサブコメントを追加する（例: `// バリデーションが成功していることを確認`）

6. 冗長なコメントを避ける
   - テストメソッド名や実装で明らかな内容は冗長なコメントや説明用のドキュメントコメントで繰り返さない

## バリデーションのテスト方法

1. 各バリデーションルールごとに別々のテストメソッドを作成する
   - 例: `test_password_required`, `test_password_string`, `test_password_min`

2. 正常系と異常系の両方をテストする
   - 正常系: ルールを満たす値でバリデーションが通ることを確認
   - 異常系: ルールを満たさない値でバリデーションが失敗することを確認

3. バリデーション結果の検証方法
   ```php
   // 正常系
   $this->assertFalse($validator->fails());

   // 異常系
   $this->assertTrue($validator->fails());
   $errors = $validator->errors()->toArray();
   $this->assertContains('required', $errors['password']); // エラーメッセージの検証
   ```

4. バリデーションテストの標準構造
   ```php
   public function test_password_required(): void
   {
     // Arrange（準備）
     $rules = $this->passwordRules();

     // 正常系
     // Act（実行）
     $validator = Validator::make(
       [
         'password' => 'valid-password-123456',
         'password_confirmation' => 'valid-password-123456'
       ],
       ['password' => $rules]
     );

     // Assert（検証）
     // バリデーションが成功していることを確認
     $this->assertFalse($validator->fails());



     // 異常系
     // Act（実行）
     $validator = Validator::make(['password' => ''], ['password' => $rules]);

     // Assert（検証）
     // バリデーションが失敗していることを確認
     $this->assertTrue($validator->fails());
     // エラーメッセージにrequiredが含まれていることを確認
     $errors = $validator->errors()->toArray();
     $this->assertContains('required', $errors['password']);
   }
   ```

5. 境界値テスト
   - 境界値がある場合（min, maxなど）は、境界値の両側をテストする
   ```php
   // 最小値のテスト
   $validator = Validator::make(['値' => 最小値-1], ['フィールド' => $rules]); // 失敗する
   $validator = Validator::make(['値' => 最小値], ['フィールド' => $rules]); // 成功する

   // 最大値のテスト
   $validator = Validator::make(['値' => 最大値], ['フィールド' => $rules]); // 成功する
   $validator = Validator::make(['値' => 最大値+1], ['フィールド' => $rules]); // 失敗する
   ```

## アサーションの書き方

1. 冗長なアサーションを避ける
   - バリデーション結果の検証には、fails()メソッドの戻り値を直接使用する
   - 例: `$this->assertFalse($validator->fails());`

2. エラーメッセージの検証
   - テスト用のロケール（'testing'）でのエラーメッセージを検証する
   - 例: `$this->assertContains('required', $errors['password']);`

## テスト環境の設定

1. テスト用の環境設定はsetUp()メソッドで行う
   ```php
   protected function setUp(): void
   {
     parent::setUp();

     // テスト用のロケールを設定
     app()->setLocale('testing');
   }
   ```

2. テストファイル内ではRefreshDatabaseを読み込まない
   - 上位の、tests/TestCase.php内で読み込ませることで不要になる

3. テストデータは必要最小限に抑える
   - テストに必要なデータのみを設定する
   - 不要なデータは含めない

## ファイル配置

1. テストファイルの配置は、アプリ側のディレクトリ構成と同じようなディレクトリ構成にする
   - 例: （アプリ側）app/Actions/Fortify/PasswordValidationRules.php
   - 例: （テスト）tests/Unit/Actions/Fortify/PasswordValidationRulesTest.php
